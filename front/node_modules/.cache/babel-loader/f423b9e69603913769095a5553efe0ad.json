{"ast":null,"code":"var _jsxFileName = \"/Users/gang-eunsol/Desktop/blog-project/src/components/editor/EditorPane/EditorPane.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport styles from './EditorPane.scss';\nimport Codemirror from 'codemirror';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/jsx/jsx';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/shell/shell';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/monokai.css';\nconst cx = classNames.bind(styles);\n\nclass EditorPane extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.editor = null;\n    this.codemirror = null;\n    this.cursor = null;\n\n    this.initializeEditor = () => {\n      this.codemirror = Codemirror(this.editor, {\n        mode: 'markdown',\n        theme: 'monokai',\n        lineNumbers: true,\n        lineWrapping: true\n      });\n      this.codemirror.on('change', this.handleChangeMarkdown);\n    };\n\n    this.handleChange = e => {\n      const onChangeInput = this.props.onChangeInput;\n      const _e$target = e.target,\n            value = _e$target.value,\n            name = _e$target.name;\n      onChangeInput({\n        name,\n        value\n      });\n    };\n\n    this.handleChangeMarkdown = doc => {\n      const onChangeInput = this.props.onChangeInput;\n      this.cursor = doc.getCursor();\n      onChangeInput({\n        name: 'markdown',\n        value: doc.getValue()\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.initializeEditor();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.markdown !== this.props.markdown) {\n      const codeMirror = this.codeMirror,\n            cursor = this.cursor;\n      if (!codeMirror) return;\n      codeMirror.setValue(this.props.markdown);\n      if (!cursor) return;\n      codeMirror.setCursor(cursor);\n    }\n  }\n\n  render() {\n    const handleChange = this.handleChange;\n    const _this$props = this.props,\n          tags = _this$props.tags,\n          title = _this$props.title,\n          markdown = _this$props.markdown;\n    return React.createElement(\"div\", {\n      className: cx('editor-pane'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: cx('title'),\n      placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      name: \"title\",\n      value: title,\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: cx('code-editor'),\n      ref: ref => this.editor = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: cx('tags'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: cx('description'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"\\uD14C\\uADF8\"), React.createElement(\"input\", {\n      placeholder: \"\\uD0DC\\uADF8\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694 (\\uC27C\\uD45C\\uB85C \\uAD6C\\uBD84)\",\n      name: \"tags\",\n      value: tags,\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default EditorPane;","map":{"version":3,"sources":["/Users/gang-eunsol/Desktop/blog-project/src/components/editor/EditorPane/EditorPane.js"],"names":["React","PropTypes","classNames","styles","Codemirror","cx","bind","EditorPane","Component","editor","codemirror","cursor","initializeEditor","mode","theme","lineNumbers","lineWrapping","on","handleChangeMarkdown","handleChange","e","onChangeInput","props","target","value","name","doc","getCursor","getValue","componentDidMount","componentDidUpdate","prevProps","prevState","markdown","codeMirror","setValue","setCursor","render","tags","title","ref"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames/bind';\nimport styles from './EditorPane.scss'\n\nimport Codemirror from 'codemirror'\n\nimport 'codemirror/mode/markdown/markdown';\n\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/jsx/jsx';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/shell/shell';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/monokai.css'\n\nconst cx = classNames.bind(styles);\n\n\n\nclass EditorPane extends React.Component {\n\n  editor = null;\n  codemirror = null;\n  cursor = null;\n\n\n  initializeEditor = () =>{\n    this.codemirror = Codemirror(this.editor, {\n      mode : 'markdown',\n      theme : 'monokai',\n      lineNumbers: true,\n      lineWrapping: true\n    });\n    this.codemirror.on('change', this.handleChangeMarkdown);\n  }\n  componentDidMount(){\n    this.initializeEditor();\n\n\n\n  }\n  handleChange = (e) => {\n    const { onChangeInput } = this.props;\n    const { value, name} = e.target;\n    onChangeInput({name, value});\n  }\n  handleChangeMarkdown = (doc) => {\n    const { onChangeInput }= this.props;\n    this.cursor = doc.getCursor();\n    onChangeInput({\n      name : 'markdown',\n      value : doc.getValue()\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if(prevProps.markdown !== this.props.markdown){\n      const { codeMirror, cursor } = this;\n      if(!codeMirror) return;\n      codeMirror.setValue(this.props.markdown);\n      if(!cursor) return;\n      codeMirror.setCursor(cursor);\n    }\n  }\n  render () {\n    const { handleChange } = this;\n    const { tags, title, markdown } = this.props;\n\n    return (\n      <div className={cx('editor-pane')}>\n        <input\n          className={cx('title')}\n          placeholder=\"제목을 입력하세요\"\n          name=\"title\"\n          value={title}\n          onChange={handleChange}\n        />\n      <div className={cx('code-editor')} ref={ref => this.editor=ref}></div>\n        <div className={cx('tags')}>\n          <div className={cx('description')}>테그</div>\n          <input\n            placeholder=\"태그를 입력하세요 (쉼표로 구분)\"\n            name=\"tags\"\n            value={tags}\n            onChange={handleChange}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default EditorPane;\n"]},"metadata":{},"sourceType":"module"}