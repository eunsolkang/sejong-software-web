{"ast":null,"code":"import _defineProperty from \"/Users/gang-eunsol/Desktop/blog-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, handleActions } from 'redux-actions';\nimport { Map, List, fromJS } from 'immutable';\nimport { pender } from 'redux-pender';\nimport * as api from 'lib/api';\nconst GET_POST_LIST = 'list/GET_POST_LIST';\nexport const getPostList = createAction(GET_POST_LIST, api.getPostList, meta => meta);\nconst initialState = Map({\n  posts: List()\n});\nexport default handleActions(_objectSpread({}, pender({\n  type: GET_POST_LIST,\n  onSuccess: (state, action) => {\n    const posts = action.payload.data;\n    return state.set('posts', fromJS(posts));\n  }\n})), initialState);","map":{"version":3,"sources":["/Users/gang-eunsol/Desktop/blog-project/src/store/modules/list.js"],"names":["createAction","handleActions","Map","List","fromJS","pender","api","GET_POST_LIST","getPostList","meta","initialState","posts","type","onSuccess","state","action","payload","data","set"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,QAAkC,WAAlC;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,OAAO,KAAKC,GAAZ,MAAsB,SAAtB;AAEA,MAAMC,aAAa,GAAG,oBAAtB;AAEA,OAAO,MAAMC,WAAW,GAAGR,YAAY,CAACO,aAAD,EAAgBD,GAAG,CAACE,WAApB,EAAiCC,IAAI,IAAEA,IAAvC,CAAhC;AAEP,MAAMC,YAAY,GAAGR,GAAG,CAAC;AACvBS,EAAAA,KAAK,EAAGR,IAAI;AADW,CAAD,CAAxB;AAIA,eAAeF,aAAa,mBACvBI,MAAM,CAAC;AACRO,EAAAA,IAAI,EAAGL,aADC;AAERM,EAAAA,SAAS,EAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAAA,UACfJ,KADe,GACLI,MAAM,CAACC,OADF,CACrBC,IADqB;AAE7B,WAAOH,KAAK,CAACI,GAAN,CAAU,OAAV,EAAmBd,MAAM,CAACO,KAAD,CAAzB,CAAP;AACD;AALO,CAAD,CADiB,GAQzBD,YARyB,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\n\nimport { Map, List, fromJS } from 'immutable';\nimport { pender } from 'redux-pender';\n\nimport * as api from  'lib/api';\n\nconst GET_POST_LIST = 'list/GET_POST_LIST';\n\nexport const getPostList = createAction(GET_POST_LIST, api.getPostList, meta=>meta);\n\nconst initialState = Map({\n  posts : List()\n});\n\nexport default handleActions({\n  ...pender({\n    type : GET_POST_LIST,\n    onSuccess : (state, action) => {\n      const { data: posts } = action.payload;\n      return state.set('posts', fromJS(posts))\n    }\n  })\n}, initialState);\n"]},"metadata":{},"sourceType":"module"}