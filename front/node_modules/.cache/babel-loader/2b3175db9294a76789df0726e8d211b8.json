{"ast":null,"code":"var _jsxFileName = \"/Users/gang-eunsol/Desktop/blog-project/src/containers/editor/EditorHeaderContainer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport EditorHeader from 'components/editor/EditorHeader';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\nimport * as editorActions from 'store/modules/editor';\n\nclass EditorHeaderContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleGoBack = () => {\n      const history = this.props.history;\n      history.goBack();\n    };\n\n    this.handleSubmit = async () => {\n      const _this$props = this.props,\n            title = _this$props.title,\n            markdown = _this$props.markdown,\n            tags = _this$props.tags,\n            EditorActions = _this$props.EditorActions,\n            history = _this$props.history;\n      const post = {\n        board_ix: 2,\n        title: title,\n        contents: markdown\n      };\n\n      try {\n        await EditorActions.writePost(post);\n        history.push(\"/post/\".concat(this.props.postId));\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n\n  componentDidMount() {\n    const _this$props2 = this.props,\n          EditorActions = _this$props2.EditorActions,\n          location = _this$props2.location;\n    EditorActions.initialize();\n\n    const _queryString$parse = queryString.parse(location.search),\n          id = _queryString$parse.id;\n\n    if (id) {\n      EditorActions.getPost(id);\n    }\n  }\n\n  render() {\n    const handleGoBack = this.handleGoBack,\n          handleSubmit = this.handleSubmit;\n    return React.createElement(EditorHeader, {\n      onGoBack: handleGoBack,\n      onSubmit: handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default connect(state => ({\n  title: state.editor.get('title'),\n  markdown: state.editor.get('markdown'),\n  tags: state.editor.get('tags'),\n  postId: state.editor.get('postId')\n}), dispatch => ({\n  EditorActions: bindActionCreators(editorActions, dispatch)\n}))(withRouter(EditorHeaderContainer));","map":{"version":3,"sources":["/Users/gang-eunsol/Desktop/blog-project/src/containers/editor/EditorHeaderContainer.js"],"names":["React","PropTypes","EditorHeader","connect","bindActionCreators","withRouter","queryString","editorActions","EditorHeaderContainer","Component","handleGoBack","history","props","goBack","handleSubmit","title","markdown","tags","EditorActions","post","board_ix","contents","writePost","push","postId","e","console","log","componentDidMount","location","initialize","parse","search","id","getPost","render","state","editor","get","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,OAAO,KAAKC,aAAZ,MAA+B,sBAA/B;;AAEA,MAAMC,qBAAN,SAAoCR,KAAK,CAACS,SAA1C,CAAoD;AAAA;AAAA;;AAAA,SASlDC,YATkD,GASnC,MAAK;AAAA,YACVC,OADU,GACE,KAAKC,KADP,CACVD,OADU;AAElBA,MAAAA,OAAO,CAACE,MAAR;AACD,KAZiD;;AAAA,SAclDC,YAdkD,GAcnC,YAAU;AAAA,0BACmC,KAAKF,KADxC;AAAA,YACfG,KADe,eACfA,KADe;AAAA,YACRC,QADQ,eACRA,QADQ;AAAA,YACEC,IADF,eACEA,IADF;AAAA,YACQC,aADR,eACQA,aADR;AAAA,YACuBP,OADvB,eACuBA,OADvB;AAEvB,YAAMQ,IAAI,GAAG;AACXC,QAAAA,QAAQ,EAAG,CADA;AAEXL,QAAAA,KAAK,EAAGA,KAFG;AAGXM,QAAAA,QAAQ,EAAGL;AAHA,OAAb;;AAKA,UAAG;AACD,cAAME,aAAa,CAACI,SAAd,CAAwBH,IAAxB,CAAN;AACAR,QAAAA,OAAO,CAACY,IAAR,iBAAsB,KAAKX,KAAL,CAAWY,MAAjC;AACD,OAHD,CAGE,OAAMC,CAAN,EAAQ;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,KA3BiD;AAAA;;AAClDG,EAAAA,iBAAiB,GAAE;AAAA,yBACoB,KAAKhB,KADzB;AAAA,UACTM,aADS,gBACTA,aADS;AAAA,UACOW,QADP,gBACOA,QADP;AAEjBX,IAAAA,aAAa,CAACY,UAAd;;AAFiB,+BAGFxB,WAAW,CAACyB,KAAZ,CAAkBF,QAAQ,CAACG,MAA3B,CAHE;AAAA,UAGTC,EAHS,sBAGTA,EAHS;;AAIjB,QAAIA,EAAJ,EAAS;AACPf,MAAAA,aAAa,CAACgB,OAAd,CAAsBD,EAAtB;AACD;AACF;;AAoBDE,EAAAA,MAAM,GAAI;AAAA,UACAzB,YADA,GAC+B,IAD/B,CACAA,YADA;AAAA,UACcI,YADd,GAC+B,IAD/B,CACcA,YADd;AAGR,WACE,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAEJ,YADZ;AAEE,MAAA,QAAQ,EAAEI,YAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAMD;;AArCiD;;AAwCpD,eAAeX,OAAO,CACnBiC,KAAD,KAAY;AACVrB,EAAAA,KAAK,EAAGqB,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,OAAjB,CADE;AAEVtB,EAAAA,QAAQ,EAAGoB,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,UAAjB,CAFD;AAGVrB,EAAAA,IAAI,EAAGmB,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,MAAjB,CAHG;AAIVd,EAAAA,MAAM,EAAGY,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,QAAjB;AAJC,CAAZ,CADoB,EAOnBC,QAAD,KAAe;AACbrB,EAAAA,aAAa,EAAGd,kBAAkB,CAACG,aAAD,EAAgBgC,QAAhB;AADrB,CAAf,CAPoB,CAAP,CAUblC,UAAU,CAACG,qBAAD,CAVG,CAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport EditorHeader from 'components/editor/EditorHeader';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\n\nimport * as editorActions from 'store/modules/editor';\n\nclass EditorHeaderContainer extends React.Component {\n  componentDidMount(){\n    const { EditorActions , location } = this.props;\n    EditorActions.initialize();\n    const { id } = queryString.parse(location.search);\n    if( id ) {\n      EditorActions.getPost(id);\n    }\n  }\n  handleGoBack = () =>{\n    const { history } = this.props;\n    history.goBack();\n  }\n\n  handleSubmit = async() =>{\n    const { title, markdown, tags, EditorActions, history } = this.props;\n    const post = {\n      board_ix : 2,\n      title : title,\n      contents : markdown,\n    };\n    try{\n      await EditorActions.writePost(post);\n      history.push(`/post/${this.props.postId}`);\n    } catch(e){\n      console.log(e);\n    }\n  }\n  render () {\n    const { handleGoBack, handleSubmit } = this;\n\n    return (\n      <EditorHeader\n        onGoBack={handleGoBack}\n        onSubmit={handleSubmit}\n      />\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    title : state.editor.get('title'),\n    markdown : state.editor.get('markdown'),\n    tags : state.editor.get('tags'),\n    postId : state.editor.get('postId')\n  }),\n  (dispatch) => ({\n    EditorActions : bindActionCreators(editorActions, dispatch)\n  })\n)(withRouter(EditorHeaderContainer));\n"]},"metadata":{},"sourceType":"module"}